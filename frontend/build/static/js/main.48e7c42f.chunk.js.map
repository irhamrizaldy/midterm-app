{"version":3,"sources":["logo.svg","components/stores/UserStore.js","components/InputField.js","components/SubmitButton.js","components/LoginForm.js","components/Home.js","components/About.js","components/Navigation.js","serviceWorker.js","index.js"],"names":["module","exports","extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","SetInputValue","doLogin","Home","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48e7c42f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { extendObservable } from 'mobx';\r\n\r\nclass UserStore {\r\n    constructor(){\r\n        extendObservable(this, {\r\n            loading: true,\r\n            isLoggedIn: false,\r\n            username: ''\r\n        })\r\n    }\r\n}\r\nexport default new UserStore();","import React, { Component } from 'react';\r\n\r\nclass InputField extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"inputField\">\r\n                <input className=\"input\" type={this.props.type} placeholder={this.props.placeholder} value={this.props.value} onChange={(e) => this.props.onChange(e.target.value)}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default InputField;","import React, { Component } from 'react';\r\n\r\nclass SubmitButton extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"submitButton\">\r\n                <button className=\"btn\" disabled={this.props.disabled} onClick={() => this.props.onClick()}>\r\n                    {this.props.text}\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SubmitButton;","import React, { Component } from 'react';\r\nimport InputField from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\nimport UserStore from './stores/UserStore';\r\n\r\nclass LoginForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            buttonDisabled: false\r\n        }\r\n    }\r\n\r\n    SetInputValue(property, val) {\r\n        val = val.trim();\r\n        if (val.length > 12) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            [property]: val\r\n        })\r\n    }\r\n\r\n    resetForm() {\r\n        this.setState({\r\n            username: '',\r\n            password: '',\r\n            buttonDisabled: false\r\n        })\r\n    }\r\n\r\n    async doLogin() {\r\n        if (!this.state.username) {\r\n            return;\r\n        }\r\n        if (!this.state.password) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            buttonDisabled: true\r\n        })\r\n\r\n        try {\r\n            let res = await fetch('/login', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: this.state.username,\r\n                    password: this.state.password\r\n                })\r\n            });\r\n\r\n            let result = await res.json();\r\n            if (result && result.success) {\r\n                UserStore.isLoggedIn = true;\r\n                UserStore.username = result.username;\r\n            } else if (result && result.success === false) {\r\n                this.resetForm();\r\n                alert(result.msg);\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n            this.resetForm();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loginForm\">\r\n                Log in\r\n                <InputField type=\"text\" placeholder=\"Username\" value={this.state.username ? this.state.username : ''} onChange={(val) => this.SetInputValue('username', val)} />\r\n                <InputField type=\"password\" placeholder=\"Password\" value={this.state.password ? this.state.password : ''} onChange={(val) => this.SetInputValue('password', val)} />\r\n                <SubmitButton text='Login' disabled={this.state.buttonDisabled} onClick={() => this.doLogin()} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default LoginForm;","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport UserStore from './stores/UserStore';\r\nimport LoginForm from './LoginForm';\r\nimport InputField from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\n\r\nexport class Home extends Component {\r\n    async componentDidMount() {\r\n        try {\r\n            let res = await fetch('/isLoggedIn', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-type': 'application/json'\r\n                }\r\n            });\r\n\r\n            let result = await res.json();\r\n            if (result && result.success) {\r\n                UserStore.loading = false;\r\n                UserStore.isLoggedIn = true;\r\n                UserStore.username = result.username;\r\n            } else {\r\n                UserStore.loading = false;\r\n                UserStore.isLoggedIn = false;\r\n            }\r\n        }\r\n        catch (e) {\r\n            UserStore.loading = false;\r\n            UserStore.isLoggedIn = false;\r\n        }\r\n    }\r\n\r\n    async doLogout() {\r\n        try {\r\n            let res = await fetch('/logout', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-type': 'application/json'\r\n                }\r\n            });\r\n\r\n            let result = await res.json();\r\n            if (result && result.success) {\r\n                UserStore.isLoggedIn = false;\r\n                UserStore.username = '';\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (UserStore.loading) {\r\n            return (\r\n                <div className=\"home\">\r\n                    <div className=\"container\">\r\n                        Loading, please wait..\r\n                </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            if (UserStore.isLoggedIn) {\r\n                return (\r\n                    <div className=\"home\">\r\n                        <div className=\"container\">\r\n                            Welcome {UserStore.username}\r\n                            <SubmitButton\r\n                                text={'Log out'}\r\n                                disabled={false} onClick={() => this.doLogout} />\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"container\">\r\n                <LoginForm />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default observer(Home);","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nexport class About extends Component {\r\n    aboutPage() {\r\n        window.location.href = \"https://github.com/irhamrizaldy\";\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"mt-5 d-flex justify-content-left\">\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nexport class Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"dark\" expand=\"lg\">\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav>\r\n                        <NavLink className=\"d-inline p-2 bg-dark text-white\" to='/'>Home</NavLink>\r\n                        <NavLink className=\"d-inline p-2 bg-dark text-white\" to='/dashboard'>Dashboard</NavLink>\r\n                        <NavLink className=\"d-inline p-2 bg-dark text-white\" to='/about'>About</NavLink>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Home } from './components/Home';\nimport LoginForm from './components/LoginForm';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}